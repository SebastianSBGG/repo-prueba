# ===================================================================
# GUÍA COMPLETA Y DEFINITIVA PARA EL PANEL DE CONTROL
# ===================================================================
# Sigue estos pasos en orden. Los he verificado y corregido para que
# funcionen con la estructura de directorios correcta.
# Trabaja siempre desde la terminal SSH de tu servidor.

# -------------------------------------------------------------------
# PASO 1: NAVEGAR AL DIRECTORIO DEL PROYECTO
# -------------------------------------------------------------------
# Todos los comandos se deben ejecutar desde esta carpeta.

cd /app/panel-project
echo "Estás en el directorio correcto. ¡Comencemos!"


# -------------------------------------------------------------------
# PASO 2: INSTALACIÓN DE DEPENDENCIAS DEL SISTEMA Y NODE
# -------------------------------------------------------------------
# Instalaremos Nginx, Certbot y todas las librerías de Node.js.

# Actualiza el sistema e instala Nginx
sudo apt-get update
sudo apt-get install -y nginx

# Instala Certbot (para SSL)
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot

# Instala las dependencias de Node.js para el panel
npm install express ejs bcrypt sqlite3 express-session connect-sqlite3 dotenv helmet resend crypto

echo "Dependencias instaladas."


# -------------------------------------------------------------------
# PASO 3: CREAR LA ESTRUCTURA DE CARPETAS
# -------------------------------------------------------------------
# Crearemos todas las carpetas que necesita el proyecto.

mkdir -p views public/css var files
echo "Estructura de carpetas creada."


# -------------------------------------------------------------------
# PASO 4: CONFIGURAR LAS VARIABLES DE ENTORNO (.env)
# -------------------------------------------------------------------
# Este archivo guardará todos tus secretos.
# Ejecuta `nano .env` y pega el siguiente contenido.
# ¡¡IMPORTANTE!! Rellena tus claves reales.

# --- INICIO DEL CÓDIGO PARA .env ---
# Clave secreta para la sesión (pon una cadena de texto larga y aleatoria)
SESSION_SECRET=pon_aqui_algo_largo_y_secreto_como_una_frase_larga

# URL de tu aplicación (para los emails de reseteo)
APP_URL=https://cloudevx.space

# Claves de Cloudflare Turnstile
TURNSTILE_SITE_KEY=TU_SITE_KEY_DE_TURNSTILE_AQUI
TURNSTILE_SECRET_KEY=TU_SECRET_KEY_DE_TURNSTILE_AQUI

# Clave de Resend y email desde el que envías
RESEND_API_KEY=TU_API_KEY_DE_RESEND_AQUI
MAIL_FROM=no-reply@tu_dominio_verificado_en_resend.com
# --- FIN DEL CÓDIGO PARA .env ---


# -------------------------------------------------------------------
# PASO 5: CREAR EL ARCHIVO DE ESTILOS CSS
# -------------------------------------------------------------------
# Ejecuta `nano public/css/style.css` y pega el siguiente código.

# --- INICIO DEL CÓDIGO PARA public/css/style.css ---
body {
  background-color: #121212;
  color: #e0e0e0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  margin: 0;
  padding: 20px;
  box-sizing: border-box;
}
.container {
  background-color: #1e1e1e;
  padding: 40px;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  width: 100%;
  max-width: 450px;
  text-align: center;
}
h1 {
  color: #ffffff;
  margin-bottom: 24px;
}
p {
  margin-bottom: 16px;
}
input[type="text"],
input[type="password"],
input[type="email"] {
  width: 100%;
  padding: 12px;
  margin-bottom: 16px;
  background-color: #333;
  border: 1px solid #444;
  border-radius: 4px;
  color: #e0e0e0;
  box-sizing: border-box;
}
button {
  width: 100%;
  padding: 12px;
  background-color: #bb86fc;
  color: #121212;
  border: none;
  border-radius: 4px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s;
  margin-top: 10px;
}
button:hover {
  background-color: #a36ef4;
}
a {
  color: #bb86fc;
  text-decoration: none;
  display: inline-block;
  margin-top: 16px;
}
a:hover {
  text-decoration: underline;
}
.turnstile-container {
    margin: 20px 0;
}
.error, .success {
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 16px;
}
.error {
    background-color: #cf6679;
    color: #121212;
}
.success {
    background-color: #03dac6;
    color: #121212;
}
.dashboard-nav {
    margin-bottom: 20px;
}
.dashboard-nav a {
    margin: 0 15px;
}
# --- FIN DEL CÓDIGO PARA public/css/style.css ---


# -------------------------------------------------------------------
# PASO 6: CREAR LAS VISTAS (ARCHIVOS .ejs)
# -------------------------------------------------------------------
# Crea cada uno de estos archivos dentro de la carpeta `views`.

# --- ARCHIVO 1: `views/register.ejs` ---
# Ejecuta `nano views/register.ejs` y pega esto:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Registro - Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
</head>
<body>
    <div class="container">
        <h1>Crear una cuenta</h1>
        <% if (locals.error) { %>
            <div class="error"><%= error %></div>
        <% } %>
        <form action="/register" method="POST">
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="Contraseña" required>
            <div class="turnstile-container">
                <div class="cf-turnstile" data-sitekey="<%= turnstileSiteKey %>"></div>
            </div>
            <button type="submit">Registrarse</button>
        </form>
        <a href="/login">¿Ya tienes una cuenta? Inicia sesión</a>
    </div>
</body>
</html>

# --- ARCHIVO 2: `views/login.ejs` ---
# Ejecuta `nano views/login.ejs` y pega esto:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Login - Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
</head>
<body>
    <div class="container">
        <h1>Iniciar Sesión</h1>
        <% if (locals.error) { %>
            <div class="error"><%= error %></div>
        <% } %>
        <% if (locals.success) { %>
            <div class="success"><%= success %></div>
        <% } %>
        <form action="/login" method="POST">
            <input type="email" name="email" placeholder="Email" required>
            <input type="password" name="password" placeholder="Contraseña" required>
            <div class="turnstile-container">
                <div class="cf-turnstile" data-sitekey="<%= turnstileSiteKey %>"></div>
            </div>
            <button type="submit">Entrar</button>
        </form>
        <a href="/register">Crear una cuenta</a>
        <a href="/forgot">¿Olvidaste tu contraseña?</a>
    </div>
</body>
</html>

# --- ARCHIVO 3: `views/forgot.ejs` ---
# Ejecuta `nano views/forgot.ejs` y pega esto:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Recuperar Contraseña</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Recuperar Contraseña</h1>
        <p>Ingresa tu email y te enviaremos un enlace para resetear tu contraseña.</p>
        <% if (locals.error) { %><div class="error"><%= error %></div><% } %>
        <% if (locals.success) { %><div class="success"><%= success %></div><% } %>
        <form action="/forgot" method="POST">
            <input type="email" name="email" placeholder="Tu email registrado" required>
            <button type="submit">Enviar enlace</button>
        </form>
        <a href="/login">Volver a inicio de sesión</a>
    </div>
</body>
</html>

# --- ARCHIVO 4: `views/reset.ejs` ---
# Ejecuta `nano views/reset.ejs` y pega esto:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Resetear Contraseña</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Crear nueva contraseña</h1>
        <% if (locals.error) { %><div class="error"><%= error %></div><% } %>
        <form action="/reset/<%= token %>" method="POST">
            <input type="password" name="password" placeholder="Nueva contraseña" required>
            <button type="submit">Guardar contraseña</button>
        </form>
    </div>
</body>
</html>

# --- ARCHIVO 5: `views/dashboard.ejs` ---
# Ejecuta `nano views/dashboard.ejs` y pega esto:
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="container">
        <h1>Bienvenido, <%= user.email %></h1>
        <nav class="dashboard-nav">
            <a href="/logout">Salir</a>
        </nav>
        <p>Este es tu panel de control. Próximamente: ¡Consola y administrador de archivos!</p>
    </div>
</body>
</html>


# -------------------------------------------------------------------
# PASO 7: CONFIGURAR NGINX COMO PROXY INVERSO
# -------------------------------------------------------------------
# Esto conectará tu dominio a tu aplicación Node.js.

# Crea el archivo de configuración de Nginx para tu dominio:
# `sudo nano /etc/nginx/sites-available/cloudevx.space`
# Pega este contenido DENTRO de ese archivo:

# --- INICIO DEL CÓDIGO PARA /etc/nginx/sites-available/cloudevx.space ---
server {
    server_name cloudevx.space www.cloudevx.space;

    location / {
        proxy_pass http://localhost:3000; # Apunta a tu app de Node
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    listen 80;
    listen [::]:80;
}
# --- FIN DEL CÓDIGO PARA /etc/nginx/sites-available/cloudevx.space ---

# Activa el nuevo sitio y borra la configuración por defecto si existe:
sudo ln -s /etc/nginx/sites-available/cloudevx.space /etc/nginx/sites-enabled/
sudo rm /etc/nginx/sites-enabled/default

# Verifica que la sintaxis es correcta:
sudo nginx -t

# Reinicia Nginx para aplicar los cambios:
sudo systemctl restart nginx


# -------------------------------------------------------------------
# PASO 8: OBTENER EL CERTIFICADO SSL CON CERTBOT
# -------------------------------------------------------------------
# Esto hará que tu sitio sea seguro (HTTPS).

# Reemplaza tu-email@ejemplo.com con tu email real
sudo certbot --nginx -d cloudevx.space -d www.cloudevx.space --non-interactive --agree-tos -m tu-email@ejemplo.com --redirect

# Certbot configurará Nginx automáticamente. Reiniciamos para asegurar:
sudo systemctl restart nginx
echo "¡Nginx y SSL configurados!"


# -------------------------------------------------------------------
# PASO 9: EL CÓDIGO PRINCIPAL DE LA APLICACIÓN (app.js)
# -------------------------------------------------------------------
# Este es el cerebro de todo el panel.
# Ejecuta `nano app.js` y pega TODO el siguiente código.

# --- INICIO DEL CÓDIGO PARA app.js ---
require('dotenv').config();
const express = require('express');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const session = require('express-session');
const SQLiteStore = require('connect-sqlite3')(session);
const { Resend } = require('resend');
const crypto = require('crypto');
const helmet = require('helmet');

const app = express();
const port = 3000;
const resend = new Resend(process.env.RESEND_API_KEY);

// --- Database Setup ---
const db = new sqlite3.Database('./var/database.db', (err) => {
    if (err) console.error(err.message);
    else console.log('Connected to the SQLite database.');
});

db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        resetToken TEXT,
        resetTokenExpires INTEGER
    )`);
});

// --- Middlewares ---
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.use(helmet({ contentSecurityPolicy: false }));

app.use(session({
    store: new SQLiteStore({ db: 'sessions.db', dir: './var' }),
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    cookie: { httpOnly: true, secure: 'auto', maxAge: 7 * 24 * 60 * 60 * 1000 }
}));

async function verifyTurnstile(req, res, next) {
    const token = req.body['cf-turnstile-response'];
    if (!token) {
        return res.status(400).render('login', { error: 'Por favor, completa el captcha.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, success: null });
    }
    const ip = req.ip;
    let formData = new FormData();
    formData.append('secret', process.env.TURNSTILE_SECRET_KEY);
    formData.append('response', token);
    formData.append('remoteip', ip);
    try {
        const response = await fetch('https://challenges.cloudflare.com/turnstile/v0/siteverify', {
            method: 'POST',
            body: formData,
        });
        const data = await response.json();
        if (data.success) {
            next();
        } else {
            res.status(400).render('login', { error: 'Verificación de captcha fallida. Intenta de nuevo.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, success: null });
        }
    } catch (error) {
        res.status(500).render('login', { error: 'Error verificando el captcha.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, success: null });
    }
}

function isAuthenticated(req, res, next) {
    if (req.session.userId) {
        next();
    } else {
        res.redirect('/login');
    }
}

// --- Routes ---
app.get('/', (req, res) => {
    if (req.session.userId) res.redirect('/dashboard');
    else res.redirect('/login');
});

app.get('/register', (req, res) => res.render('register', { turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, error: null }));

app.post('/register', verifyTurnstile, async (req, res) => {
    const { email, password } = req.body;
    if (!email || !password) return res.status(400).render('register', { error: 'Email y contraseña son requeridos.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY });
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        db.run('INSERT INTO users (email, password) VALUES (?, ?)', [email, hashedPassword], (err) => {
            if (err) return res.status(400).render('register', { error: 'El email ya está en uso.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY });
            res.redirect('/login');
        });
    } catch (e) {
        res.status(500).render('register', { error: 'Error en el servidor.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY });
    }
});

app.get('/login', (req, res) => res.render('login', { turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, error: null, success: req.query.success }));

app.post('/login', verifyTurnstile, (req, res) => {
    const { email, password } = req.body;
    db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
        if (err || !user || !await bcrypt.compare(password, user.password)) {
            return res.status(401).render('login', { error: 'Email o contraseña incorrectos.', turnstileSiteKey: process.env.TURNSTILE_SITE_KEY, success: null });
        }
        req.session.userId = user.id;
        req.session.userEmail = user.email;
        res.redirect('/dashboard');
    });
});

app.get('/logout', (req, res) => {
    req.session.destroy(() => res.redirect('/login'));
});

app.get('/forgot', (req, res) => res.render('forgot', { error: null, success: null }));

app.post('/forgot', async (req, res) => {
    const { email } = req.body;
    db.get('SELECT * FROM users WHERE email = ?', [email], async (err, user) => {
        if (!user) return res.render('forgot', { success: 'Si el email existe en nuestra base de datos, se ha enviado un enlace.', error: null });
        const token = crypto.randomBytes(32).toString('hex');
        const expires = Date.now() + 3600000; // 1 hour
        db.run('UPDATE users SET resetToken = ?, resetTokenExpires = ? WHERE email = ?', [token, expires, email]);
        const resetURL = `${process.env.APP_URL}/reset/${token}`;
        try {
            await resend.emails.send({ from: process.env.MAIL_FROM, to: user.email, subject: 'Reseteo de contraseña', html: `Haz clic <a href="${resetURL}">aquí</a> para resetear tu contraseña.` });
            res.render('forgot', { success: 'Si el email existe, se ha enviado un enlace.', error: null });
        } catch (error) {
            res.render('forgot', { error: 'Error al enviar el email.', success: null });
        }
    });
});

app.get('/reset/:token', (req, res) => {
    const { token } = req.params;
    db.get('SELECT * FROM users WHERE resetToken = ? AND resetTokenExpires > ?', [token, Date.now()], (err, user) => {
        if (!user) return res.status(400).send('Token inválido o expirado.');
        res.render('reset', { token, error: null });
    });
});

app.post('/reset/:token', async (req, res) => {
    const { token } = req.params;
    const { password } = req.body;
    db.get('SELECT * FROM users WHERE resetToken = ? AND resetTokenExpires > ?', [token, Date.now()], async (err, user) => {
        if (!user) return res.render('reset', { token, error: 'Token inválido o expirado.' });
        const hashedPassword = await bcrypt.hash(password, 10);
        db.run('UPDATE users SET password = ?, resetToken = NULL, resetTokenExpires = NULL WHERE id = ?', [hashedPassword, user.id], () => {
            res.redirect('/login?success=Contraseña+actualizada+con+éxito');
        });
    });
});

app.get('/dashboard', isAuthenticated, (req, res) => {
    db.get('SELECT email FROM users WHERE id = ?', [req.session.userId], (err, user) => {
        if (!user) return res.redirect('/login');
        res.render('dashboard', { user });
    });
});

// --- Server Start ---
app.listen(port, () => console.log(`Panel de control escuchando en http://localhost:${port}`));
# --- FIN DEL CÓDIGO PARA app.js ---


# -------------------------------------------------------------------
# PASO 10: INICIAR LA APLICACIÓN CON PM2
# -------------------------------------------------------------------
# Esto pondrá tu panel a funcionar 24/7.

# Asegúrate de estar en /app/panel-project
cd /app/panel-project

# Inicia la app con el nombre "panel"
pm2 start app.js --name panel

# Guarda la lista de procesos de PM2 para que se reinicien con el servidor
pm2 save

# Revisa que todo esté funcionando
pm2 status
pm2 logs panel

# ¡Y LISTO!
# Si seguiste todos los pasos, ahora deberías poder ir a
# https://cloudevx.space y ver tu panel de login.
# ¡Felicitaciones!
